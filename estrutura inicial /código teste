import os
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
from modelo import tradutor_terminal as modelo

# Configurações para a tradução
modelo.delimitadores = [['§', '§'], ['$', '$'], ['[', ']']]
modelo.substituir = 'var'
modelo.palavras_ignoradas = {'ENGLISH'}  # Usando um conjunto para pesquisa mais eficiente
modelo.caminho_arquivo = 'CombatUpdate.csv'
modelo.regex = r';(.*?);'  # Usando uma raw string para a expressão regular
batch_size = 1000  # Aumentando o tamanho do lote para melhorar a eficiência

# Configuração do logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def traduzir_lote(lote):
    """Traduz um lote de linhas do arquivo."""
    try:
        for linha in lote:
            modelo.traduzir_linhas_salvas([linha])
    except Exception as e:
        logging.error(f"Erro na tradução: {e}")

def gerar_lotes_arquivo(arquivo):
    """Gera lotes de linhas do arquivo."""
    while True:
        batch = [next(arquivo) for _ in range(batch_size)]
        if not batch:
            break
        yield batch

def processar_arquivo():
    """Processa o arquivo de entrada."""
    try:
        with open(modelo.caminho_arquivo, 'r', encoding='utf-8-sig') as arquivo:
            with ThreadPoolExecutor() as executor:
                futures = []
                for batch in gerar_lotes_arquivo(arquivo):
                    future = executor.submit(traduzir_lote, batch)
                    futures.append(future)
                for future in as_completed(futures):
                    future.result()  # Aguarda a conclusão da tarefa e verifica exceções
    except FileNotFoundError:
        logging.error(f"Erro: O arquivo '{modelo.caminho_arquivo}' não foi encontrado.")
    except Exception as e:
        logging.error(f"Erro inesperado: {e}")

def main():
    """Função principal."""
    logging.info("Iniciando o processamento do arquivo...")
    if os.path.exists(modelo.caminho_arquivo):
        processar_arquivo()
        logging.info("Processamento concluído com sucesso.")
    else:
        logging.error(f"Erro: O arquivo '{modelo.caminho_arquivo}' não existe.")

if __name__ == '__main__':
    main()
